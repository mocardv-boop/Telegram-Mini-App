import logging
import sqlite3
import random
import os
import shutil
import time
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import NetworkError, TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = "8455502884:AAHNPG2Ou_QlX0M4GZq3uZcpODd6zIkraZo"
ADMIN_IDS = [8378217976]  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID!

# –ü–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
IMAGE_FOLDER = "bot_images"
os.makedirs(IMAGE_FOLDER, exist_ok=True)

print("üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

class Database:
    def __init__(self, db_name="bot_database.db"):
        self.db_name = db_name
        self.init_db()

    def init_db(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                registration_date TEXT,
                last_game_date TEXT,
                prizes_count INTEGER DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_prizes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                prize_name TEXT,
                won_date TEXT,
                expires_date TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS prize_config (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                chance INTEGER,
                duration_hours INTEGER
            )
        ''')
        
        cursor.execute('SELECT COUNT(*) FROM prize_config')
        if cursor.fetchone()[0] == 0:
            default_prizes = [
                ("üéÅ 10% —Å–∫–∏–¥–∫–∞", 40, 24),
                ("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", 30, 24),
                ("üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞", 20, 24),
                ("üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑", 10, 24),
            ]
            for prize in default_prizes:
                cursor.execute(
                    'INSERT INTO prize_config (name, chance, duration_hours) VALUES (?, ?, ?)',
                    prize
                )
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

    def register_user(self, user_id, username, first_name, last_name):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT OR IGNORE INTO users 
                (user_id, username, first_name, last_name, registration_date, prizes_count)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name, 
                  datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 0))
            conn.commit()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
        finally:
            conn.close()

    def get_user_profile(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT username, first_name, last_name, registration_date, last_game_date, prizes_count 
            FROM users WHERE user_id = ?
        ''', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'username': result[0] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                'first_name': result[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                'last_name': result[2] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                'registration_date': result[3] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                'last_game_date': result[4] or '–ù–∏–∫–æ–≥–¥–∞',
                'prizes_count': result[5] or 0
            }
        return None

    def can_play_today(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT last_game_date FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result or not result[0]:
            return True
            
        try:
            last_game = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            return datetime.now() - last_game >= timedelta(days=1)
        except:
            return True

    def update_last_game(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users 
            SET last_game_date = ?, prizes_count = prizes_count + 1 
            WHERE user_id = ?
        ''', (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
        conn.commit()
        conn.close()

    def add_prize(self, user_id, prize_name, duration_hours):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        won_date = datetime.now()
        expires_date = won_date + timedelta(hours=duration_hours)
        cursor.execute('''
            INSERT INTO user_prizes (user_id, prize_name, won_date, expires_date)
            VALUES (?, ?, ?, ?)
        ''', (user_id, prize_name, 
              won_date.strftime("%Y-%m-%d %H:%M:%S"),
              expires_date.strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
        conn.close()

    def get_user_prizes(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT prize_name, won_date, expires_date, is_active 
            FROM user_prizes 
            WHERE user_id = ? 
            ORDER BY won_date DESC
        ''', (user_id,))
        prizes = []
        for row in cursor.fetchall():
            prizes.append({
                'name': row[0],
                'won_date': row[1],
                'expires_date': row[2],
                'is_active': bool(row[3])
            })
        conn.close()
        return prizes

    def get_prize_config(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT id, name, chance, duration_hours FROM prize_config')
        prizes = []
        for row in cursor.fetchall():
            prizes.append({
                'id': row[0],
                'name': row[1],
                'chance': row[2],
                'duration_hours': row[3]
            })
        conn.close()
        return prizes

    def add_prize_config(self, name, chance, duration_hours):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO prize_config (name, chance, duration_hours) VALUES (?, ?, ?)',
            (name, chance, duration_hours)
        )
        conn.commit()
        conn.close()

    def delete_prize_config(self, prize_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM prize_config WHERE id = ?', (prize_id,))
        conn.commit()
        conn.close()

    def get_all_users(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users')
        users = [row[0] for row in cursor.fetchall()]
        conn.close()
        return users

    def get_stats(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        cursor.execute('SELECT COUNT(*) FROM user_prizes')
        total_prizes = cursor.fetchone()[0]
        today = datetime.now().strftime("%Y-%m-%d")
        cursor.execute('SELECT COUNT(*) FROM users WHERE registration_date LIKE ?', (f'{today}%',))
        users_today = cursor.fetchone()[0]
        conn.close()
        return {
            'total_users': total_users,
            'total_prizes': total_prizes,
            'users_today': users_today
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
admin_states = {}

def is_admin(user_id):
    return user_id in ADMIN_IDS

def get_image_files():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ JPG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
    images = []
    for file in os.listdir(IMAGE_FOLDER):
        if file.lower().endswith(('.jpg', '.jpeg', '.png')):
            images.append(file)
    return images

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.register_user(user.id, user.username, user.first_name, user.last_name)
    await show_main_menu(update, context)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    await show_admin_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üéÅ –í—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑", callback_data="win_prize")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏", callback_data="my_prizes")],
        [InlineKeyboardButton("üñºÔ∏è –ú–µ–Ω—é", callback_data="menu_images")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("üî• –ê–∫—Ü–∏–∏", callback_data="promotions")],
    ]
    
    user_id = update.effective_user.id if update.effective_user else update.callback_query.from_user.id
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑", callback_data="add_prize")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑", callback_data="delete_prize")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤", callback_data="view_prizes")],
        [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="send_notification")],
        [InlineKeyboardButton("üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", callback_data="manage_images")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "profile":
        await show_profile(update, context, user_id)
    elif query.data == "win_prize":
        await win_prize(update, context, user_id)
    elif query.data == "my_prizes":
        await show_my_prizes(update, context, user_id)
    elif query.data == "menu_images":
        await show_menu_images(update, context)
    elif query.data == "support":
        await show_support(update, context, user_id)
    elif query.data == "promotions":
        await show_promotions(update, context, user_id)
    elif query.data == "admin_menu":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await show_admin_menu(update, context)
    elif query.data == "add_prize":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await start_add_prize(update, context, user_id)
    elif query.data == "delete_prize":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await show_delete_prize_menu(update, context, user_id)
    elif query.data.startswith("delete_prize_"):
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        prize_id = int(query.data.split("_")[2])
        await delete_prize(update, context, user_id, prize_id)
    elif query.data == "view_prizes":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await show_prize_list(update, context, user_id)
    elif query.data == "send_notification":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await start_send_notification(update, context, user_id)
    elif query.data == "manage_images":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await show_manage_images(update, context, user_id)
    elif query.data == "stats":
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        await show_stats(update, context, user_id)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    profile = db.get_user_profile(user_id)
    if profile:
        text = f"""üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üë§ –ò–º—è: {profile['first_name']} {profile['last_name']}
üì± Username: {profile['username']}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {profile['registration_date']}
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–∑–æ–≤: {profile['prizes_count']}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {profile['last_game_date']}"""
    else:
        text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def win_prize(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    if not db.can_play_today(user_id):
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await update.callback_query.edit_message_text(
            "‚è∞ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    prizes = db.get_prize_config()
    if not prizes:
        prize = {"name": "üéÅ –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–∑", "duration_hours": 24}
    else:
        rand = random.randint(1, 100)
        current_chance = 0
        for p in prizes:
            current_chance += p["chance"]
            if rand <= current_chance:
                prize = p
                break
        else:
            prize = prizes[0]
    
    db.add_prize(user_id, prize["name"], prize["duration_hours"])
    db.update_last_game(user_id)
    
    text = f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **{prize['name']}**\n‚è∞ –ü—Ä–∏–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç: {prize['duration_hours']} —á–∞—Å–æ–≤"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_my_prizes(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    prizes = db.get_user_prizes(user_id)
    if not prizes:
        text = "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∑–æ–≤"
    else:
        text = "üì¶ **–í–∞—à–∏ –ø—Ä–∏–∑—ã:**\n\n"
        for i, prize in enumerate(prizes, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if prize['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"{i}. **{prize['name']}**\n"
            text += f"   üïê –ü–æ–ª—É—á–µ–Ω: {prize['won_date']}\n"
            text += f"   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {prize['expires_date']}\n"
            text += f"   {status}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_menu_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    images = get_image_files()
    if not images:
        text = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = os.path.join(IMAGE_FOLDER, images[0])
    try:
        with open(image_path, 'rb') as photo:
            await update.callback_query.message.reply_photo(
                photo=photo,
                caption="üñºÔ∏è –ú–µ–Ω—é",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        await update.callback_query.delete_message()
    except Exception as e:
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    text = "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @yab2701"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_promotions(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    text = """üî• **–¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:**

‚Ä¢ üéÅ –°–∫–∏–¥–∫–∞ 15% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
‚Ä¢ üöö –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 1000 —Ä—É–±.
‚Ä¢ ‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üíé –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def start_add_prize(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    admin_states[user_id] = {"step": "waiting_prize_name"}
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]]
    await update.callback_query.edit_message_text(
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_delete_prize_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    prizes = db.get_prize_config()
    if not prizes:
        text = "üì≠ –ü—Ä–∏–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    keyboard = []
    for prize in prizes:
        keyboard.append([InlineKeyboardButton(
            f"üóëÔ∏è {prize['name']} ({prize['chance']}%)", 
            callback_data=f"delete_prize_{prize['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    
    text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def delete_prize(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, prize_id: int):
    prizes = db.get_prize_config()
    prize_name = next((p['name'] for p in prizes if p['id'] == prize_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∑")
    
    db.delete_prize_config(prize_id)
    
    text = f"‚úÖ –ü—Ä–∏–∑ **{prize_name}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_prize_list(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    prizes = db.get_prize_config()
    if not prizes:
        text = "üì≠ –ü—Ä–∏–∑—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else:
        text = "üéÅ **–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤:**\n\n"
        for i, prize in enumerate(prizes, 1):
            text += f"{i}. **{prize['name']}**\n"
            text += f"   üéØ –®–∞–Ω—Å: {prize['chance']}%\n"
            text += f"   ‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {prize['duration_hours']}—á\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def start_send_notification(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    admin_states[user_id] = {"step": "waiting_notification_text"}
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]]
    await update.callback_query.edit_message_text(
        "üì¢ **–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_manage_images(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    images = get_image_files()
    text = "üñºÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏**\n\n"
    
    if images:
        text += "üìÅ –¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
        for img in images:
            text += f"‚Ä¢ {img}\n"
        text += "\n"
    else:
        text += "üì≠ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
    
    text += "üì§ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JPG/PNG —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    stats = db.get_stats()
    images_count = len(get_image_files())
    
    text = f"""üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üéÅ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤: {stats['total_prizes']}
üìÖ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats['users_today']}
üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é: {images_count}"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) –æ—Ç –∞–¥–º–∏–Ω–∞
    if update.message.document or update.message.photo:
        if not is_admin(user_id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if update.message.document:
                file = await update.message.document.get_file()
                file_extension = os.path.splitext(update.message.document.file_name)[1].lower()
            else:
                file = await update.message.photo[-1].get_file()
                file_extension = '.jpg'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filename = f"menu_image{file_extension}"
            file_path = os.path.join(IMAGE_FOLDER, filename)
            await file.download_to_drive(file_path)
            
            await update.message.reply_text(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {filename}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if user_id not in admin_states:
        return
    
    state = admin_states[user_id]
    text = update.message.text
    
    if state["step"] == "waiting_prize_name":
        state["step"] = "waiting_prize_chance"
        state["name"] = text
        await update.message.reply_text("üéØ –í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è (1-100%):")
        
    elif state["step"] == "waiting_prize_chance":
        try:
            chance = int(text)
            if 1 <= chance <= 100:
                state["step"] = "waiting_prize_duration"
                state["chance"] = chance
                await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–∞ –≤ —á–∞—Å–∞—Ö:")
            else:
                await update.message.reply_text("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100%!")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            
    elif state["step"] == "waiting_prize_duration":
        try:
            duration = int(text)
            if duration > 0:
                db.add_prize_config(state["name"], state["chance"], duration)
                del admin_states[user_id]
                await update.message.reply_text("‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    elif state["step"] == "waiting_notification_text":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users = db.get_all_users()
        success_count = 0
        fail_count = 0
        
        await update.message.reply_text(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        for user_id in users:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{text}",
                    parse_mode='Markdown'
                )
                success_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                await asyncio.sleep(0.1)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                fail_count += 1
        
        del admin_states[user_id]
        
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        raise context.error
    except NetworkError:
        print("üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    except TelegramError as e:
        print(f"üì± –û—à–∏–±–∫–∞ Telegram: {e}")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("=" * 50)
    print("ü§ñ –ó–ê–ü–£–°–ö –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º application —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .read_timeout(30)
            .write_timeout(30)
            .connect_timeout(30)
            .pool_timeout(30)
            .build()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_panel))
        
        patterns = [
            "main_menu", "profile", "win_prize", "my_prizes", "menu_images",
            "support", "promotions", "admin_menu", "add_prize", "delete_prize",
            "view_prizes", "send_notification", "manage_images", "stats"
        ]
        for pattern in patterns:
            application.add_handler(CallbackQueryHandler(button_handler, pattern=f"^{pattern}$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
        application.add_handler(CallbackQueryHandler(button_handler, pattern="^delete_prize_"))
        
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("üì° –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞...")
        print("=" * 50)
        print("üí° –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ Telegram:")
        print("   /start - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
        print("   /admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ADMIN_ID)")
        print("=" * 50)
        
        if ADMIN_IDS[0] == 8378217976:
            print("‚ö†Ô∏è  –ó–∞–º–µ–Ω–∏—Ç–µ ADMIN_ID –Ω–∞ –≤–∞—à ID –∏–∑ @userinfobot")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        main()

if __name__ == "__main__":
    main()